drop policy "Individuals can create todos." on "public"."todos";

drop policy "Individuals can delete their own todos." on "public"."todos";

drop policy "Individuals can update their own todos." on "public"."todos";

drop policy "Individuals can view their own todos. " on "public"."todos";

revoke delete on table "public"."todos" from "anon";

revoke insert on table "public"."todos" from "anon";

revoke references on table "public"."todos" from "anon";

revoke select on table "public"."todos" from "anon";

revoke trigger on table "public"."todos" from "anon";

revoke truncate on table "public"."todos" from "anon";

revoke update on table "public"."todos" from "anon";

revoke delete on table "public"."todos" from "authenticated";

revoke insert on table "public"."todos" from "authenticated";

revoke references on table "public"."todos" from "authenticated";

revoke select on table "public"."todos" from "authenticated";

revoke trigger on table "public"."todos" from "authenticated";

revoke truncate on table "public"."todos" from "authenticated";

revoke update on table "public"."todos" from "authenticated";

revoke delete on table "public"."todos" from "service_role";

revoke insert on table "public"."todos" from "service_role";

revoke references on table "public"."todos" from "service_role";

revoke select on table "public"."todos" from "service_role";

revoke trigger on table "public"."todos" from "service_role";

revoke truncate on table "public"."todos" from "service_role";

revoke update on table "public"."todos" from "service_role";

alter table "public"."todos" drop constraint "todos_task_check";

alter table "public"."todos" drop constraint "todos_user_id_fkey";

alter table "public"."todos" drop constraint "todos_pkey";

drop index if exists "public"."todos_pkey";

drop table "public"."todos";

create table "public"."stats" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "question_name" text,
    "is_correct" boolean default false,
    "is_complete" boolean default false,
    "inserted_at" timestamp with time zone not null default timezone('utc'::text, now())
);


alter table "public"."stats" enable row level security;

CREATE UNIQUE INDEX stats_pkey ON public.stats USING btree (id);

alter table "public"."stats" add constraint "stats_pkey" PRIMARY KEY using index "stats_pkey";

alter table "public"."stats" add constraint "stats_question_name_check" CHECK ((char_length(question_name) > 3)) not valid;

alter table "public"."stats" validate constraint "stats_question_name_check";

alter table "public"."stats" add constraint "stats_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."stats" validate constraint "stats_user_id_fkey";

grant delete on table "public"."stats" to "anon";

grant insert on table "public"."stats" to "anon";

grant references on table "public"."stats" to "anon";

grant select on table "public"."stats" to "anon";

grant trigger on table "public"."stats" to "anon";

grant truncate on table "public"."stats" to "anon";

grant update on table "public"."stats" to "anon";

grant delete on table "public"."stats" to "authenticated";

grant insert on table "public"."stats" to "authenticated";

grant references on table "public"."stats" to "authenticated";

grant select on table "public"."stats" to "authenticated";

grant trigger on table "public"."stats" to "authenticated";

grant truncate on table "public"."stats" to "authenticated";

grant update on table "public"."stats" to "authenticated";

grant delete on table "public"."stats" to "service_role";

grant insert on table "public"."stats" to "service_role";

grant references on table "public"."stats" to "service_role";

grant select on table "public"."stats" to "service_role";

grant trigger on table "public"."stats" to "service_role";

grant truncate on table "public"."stats" to "service_role";

grant update on table "public"."stats" to "service_role";

create policy "Individuals can create stats."
on "public"."stats"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Individuals can update their own stats."
on "public"."stats"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Individuals can view their own stats. "
on "public"."stats"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = user_id));



